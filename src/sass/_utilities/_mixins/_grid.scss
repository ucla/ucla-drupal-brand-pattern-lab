/*
 * Grid mixins
 */

// this builds everything at once
@mixin make-grid(
  $columns: $grid-columns,
  $gutter: $grid-gutter-width,
  $breakpoints: $grid-breakpoints
) {
  // Common properties for all breakpoints
  %grid-column {
    width: 100%;
    // min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: ($gutter / 2);
    padding-left: ($gutter / 2);

    background:blue;
  }

  //define main container
  display: grid;
  align-items: stretch;
  justify-content: stretch;
  grid-template-columns: repeat($columns, 1fr);
  grid-column-gap: $gutter;
  margin-right: auto;
  margin-left: auto;

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    // @for $i from 1 through $columns {
    //   .col#{$infix}-#{$i} {
    //     @extend %grid-column;
    //   }
    // }
    // .col#{$infix},
    // .col#{$infix}-auto {
    //   @extend %grid-column;
    // }

    // Loop through breakpoints (asc)
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // // Provide basic `.col-{bp}` classes
      // .col#{$infix} {
      // }
      // .col#{$infix}-auto {
      // }

      // numbered "span" columns
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      // offset classes
      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      // @for $i from 0 through ($columns - 1) {
      //   @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
      //     .offset#{$infix}-#{$i} {
      //       @include make-col-offset($i, $columns);
      //     }
      //   }
      // }

      //order classes
      // .order#{$infix}-first {
      // }
      //
      // .order#{$infix}-last {
      // }
      //
      // @for $i from 0 through $columns {
      //   .order#{$infix}-#{$i} {
      //     // order: $i;
      //   }
      // }


    }
  }
}



// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths(
  $max-widths: $container-max-widths,
  $breakpoints: $grid-breakpoints
) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-col(
  $size,
  $columns: $grid-columns
) {
  grid-column-start: span $size;
}

@mixin make-col-offset(
  $size,
  $columns: $grid-columns
) {
  grid-column-start: $size;
}
